" Features to enable/disable:

let g:vimrc_feature_coc = 1
if has('win32unix')
  let g:vimrc_feature_coc = 0
end

autocmd VimEnter * call DisableGuiPopupmenu()

function! DisableGuiPopupmenu()
    if exists(':GuiPopupmenu') == 2
        GuiPopupmenu 0
    end
endfunction

highlight Normal guibg=Black guifg=White
" Give us a syntax item in the statusline because a lot of weird highlights
" have me scratch my head.
function! SyntaxItem()
    return synIDattr(synID(line("."),col("."),1),"name")
endfunction
set nocompatible
filetype off

set rtp+=~/.vim
set rtp+=~/.vim/vim-plug

set rtp-=~/vimfiles

call plug#begin('~/.vim/bundle')
    "Plug 'PProvost/vim-ps1'

    "" Snippets:
    Plug 'MarcWeber/vim-addon-mw-utils'
    Plug 'tomtom/tlib_vim'
    Plug 'garbas/vim-snipmate'

    "" Optional:
    Plug 'honza/vim-snippets'

    " Rust:
    " It's much more difficult to get node, thus npm, thus yarn working
    " properly with cygwin.  Let's disable it here.
    if g:vimrc_feature_coc
        Plug 'https://github.com/rust-lang/rust.vim.git'
        Plug 'https://github.com/neoclide/coc.nvim', {'branch': 'release'}
    end

    " Factor:
    Plug 'https://github.com/brandonbloom/vim-factor'

    "" NERDtree:
    Plug 'preservim/nerdtree'
call plug#end()

" Omit the indent option as it usually messes with how I tend to like my
" indentation being manual.
filetype plugin on
filetype indent off
set nosmartindent

"colorscheme koehler
"hi StatusLine ctermfg=4 ctermbg=white gui=bold guifg=blue guibg=white
"hi StatusLineNC term=reverse ctermfg=4 ctermbg=white guifg=blue guibg=white

set autoindent
set bg=dark
set backspace=2
set comments+=:--
set encoding=utf8
set fileencoding=utf8
set expandtab
set guicursor=a:blinkon0
set guioptions=c
set hidden
set laststatus=2
set hlsearch
set indentkeys=
set mouse=c
set nowrapscan
set number
set relativenumber
set shiftwidth=4
set softtabstop=4
set statusline=si='%{SyntaxItem()}'\ l=%l\ c=%c\ o=%o
set tabstop=4
set timeoutlen=10000
set fileformats=unix,dos
set formatoptions+=n

" This may be useful if you have to keep on changing resolutions, but
" otherwise it's not very useful.
"if has("gui_running")
"  set guicursor=n-v-c:blinkon0
"  function! BigMode()
"    set guifont=Fixedsys:h16:cANSI:qDRAFT
"  endfunction
"
"  function! SmallMode()
"    set guifont=Fixedsys:h9:cANSI:qDRAFT
"  endfunction
"  map <Leader>B :call BigMode()<CR>
"  map <Leader>b :call SmallMode()<CR>
"endif

"set guifont=Courier_New:h12:cANSI:qDRAFT

" Cope with different source files' indents.
map <Leader>1 :set ts=1 sts=1 sw=1 expandtab<CR>
map <Leader>2 :set ts=2 sts=2 sw=2 expandtab<CR>
map <Leader>3 :set ts=3 sts=3 sw=3 expandtab<CR>
map <Leader>4 :set ts=4 sts=4 sw=4 expandtab<CR>
map <Leader>5 :set ts=5 sts=5 sw=5 expandtab<CR>
map <Leader>6 :set ts=6 sts=6 sw=6 expandtab<CR>
map <Leader>7 :set ts=7 sts=7 sw=7 expandtab<CR>
map <Leader>8 :set ts=8 sts=8 sw=8 expandtab<CR>
map <Leader>9 :set ts=9 sts=9 sw=9 expandtab<CR>
map <Leader>0 :set ts=10 sts=10 sw=10 expandtab<CR>
map <Leader>t :set noexpandtab<CR>
map <Leader>T :set expandtab<CR>
map <Leader>n :set breakindentopt=shift\:0 linebreak breakindent showbreak=\\\  breakat=\ \	<CR>
map <Leader>N :set breakindentopt= nolinebreak nobreakindent showbreak= breakat=\ \	!@*-+;:,./?<CR>

map <F3> :let @/=''<CR>

map <M-Left> :bprevious<CR>
map <M-Right> :bnext<CR>

map <S-Left> :tabmove -1<CR>
map <Leader><Left> :tabmove -1<CR>
map <S-Right> :tabmove +1<CR>
map <Leader><Right> :tabmove +1<CR>

map <A-Up> :previous<CR>
map <A-Down> :next<CR>
map <Left> :tabprev<CR>
map <Right> :tabnext<CR>

" Replace smart quotes (digraphs \"6 and \"9).
map <leader>rq :%s/[‚Äú‚Äù]/"/g<CR>

map <Leader>s :mksession!<CR>:echo 'Session saved to Session.vim in current working dir.'<CR>
map <Leader>S :so Session.vim<CR>

map <Leader>c :tabclose<CR>

" Fix nvim copy paste
vnoremap <C-Insert> "+y
map <S-Insert>		"+gP
cmap <S-Insert>		<C-R>+
imap <S-Insert>		<C-R>+

" Change windows with A+[hjkl]
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

let g:vimrc_set_chere_invoking = 0

if has('win32')
    let g:vimrc_set_chere_invoking = 1
    let $CHERE_INVOKING = 1
    nmap <Leader>tc :vsplit \| terminal C:\\cygwin64\\bin\\bash.exe --login<CR>
else
    if g:vimrc_set_chere_invoking
        silent! unlet $CHERE_INVOKING
    end
    silent! unmap <Leader>tc
end

" Open terminals
nmap <Leader>tC :vsplit \| terminal cmd <CR>
nmap <Leader>tp :vsplit \| terminal powershell <CR>
nmap <Leader>tb :vsplit \| terminal bash <CR>

" Move location list
map <silent><Up> :silent! lprev<CR>:redraw!<CR>
map <silent><Down> :silent! lnext<CR>:redraw!<CR>

" Move location list
map <silent><S-Up> :silent! cprev<CR>:redraw!<CR>
"map <silent>[1;2A :silent! cprev<CR>:redraw!<CR>
map <silent><S-Down> :silent! cnext<CR>:redraw!<CR>

" I seem to updtte my config every day
map <Leader>v :tabnew ~/.vimrc <CR>

" Run hitest
map <Leader>ht :source $VIMRUNTIME/syntax/hitest.vim <CR>

""""" End of common stuff

"""""" Fixit for FreeBSD
"
"" Set Shift+Tab to the correct sequence.  For some reason, vim is getting the
"" wrong sequence in tmux via ssh for my FreeBSD install.  Debian and OpenBSD
"" work just fine.
"if &term == "screen"
"    set t_kB=[Z
"endif



" Haskell mappings:
" let g:need_hask = 1
if exists("g:need_hask")
    imap <C-d> <Space>::<Space>
    imap <C-f> <Space>-><Space>
    imap <C-b> <Space>>>=<Space>
endif
" :Haskell mappings

syntax on

" If we re-source this file, we need to ensure we're not nuking the existing
" g:snipMate variable.  Otherwise I get an error ("Key not present in
" Dictionary: "get_snippets") when using the tab key in nvim.  I don't have
" SuperTab, which apparently causes a few problems, so not sure what the
" dealio is.
if !exists('g:snipMate')
    let g:snipMate = { 'snippet_version' : 1 }
endif

" Coq bindings:
" let g:need_coq = 1
if exists("g:need_coq")
    map <C-M-L> :CoqToLine<CR>
    map <C-M-J> :CoqNext<CR>
    map <C-M-U> :CoqUndo<CR>
    map <C-M-T> :CoqToTop<CR>
    map l :CoqToLine<CR>
    map j :CoqNext<CR>
    map u :CoqUndo<CR>
    map t :CoqToTop<CR>
    " Change coqtail to open on the left instead of the right.
    let g:coqtail#panels#main = 'main'
    let g:coqtail#panels#goal = 'goal'
    let g:coqtail#panels#info = 'info'
    let g:coqtail_panel_layout = {
    \ g:coqtail#panels#goal:
      \ [[g:coqtail#panels#info, 'above'], [g:coqtail#panels#main, 'left']],
    \ g:coqtail#panels#info:
      \ [[g:coqtail#panels#goal, 'below'], [g:coqtail#panels#main, 'left']]
    \}
endif
" :Coq bindings

  " Fix the floating menu selection.  Default is white on magenta, which makes me cry.
highlight Pmenu guifg=White guibg=#222222
highlight PmenuSel guifg=White guibg=Black

" Coc stuff:
if g:vimrc_feature_coc

  let g:LanguageClient_serverCommands = {
    \ 'sh': ['bash-language-server', 'start']
    \ }
  let g:coc_config_home = '~/.vim'
  map <F4> :CocList<CR>

  highlight Pmenu guifg=White guibg=#222222
  highlight PmenuSel guifg=White guibg=Black
  "" Also fix Coc floating colors.  Match the colors above.  cterm colors haven't been tested.
  "highlight FgCocErrorFloatBgCocFloating ctermfg=Black ctermbg=White guifg=White guibg=#222222
  "" Fix unused colors
  "highlight CocUnusedHighlight guibg=NONE guifg=yellow

  inoremap <silent><expr> <C-j> coc#refresh()
  map <Leader>G <Plug>(coc-definition)<CR>
  map <Leader>D :call CocActionAsync('diagnosticPreview')<CR>
  map <Leader>d :call CocActionAsync('diagnosticInfo')<CR>
  map <Leader>o :call CocActionAsync('showOutline')<CR>
  map <Leader>O :call CocActionAsync('hideOutline')<CR>
  map <Leader><Enter> <Plug>(coc-codeaction-cursor)
  map <Leader>gC <Plug>(coc-codeaction)
  map <C-Up> :call CocActionAsync('diagnosticPrevious')<CR>
  map <C-Down> :call CocActionAsync('diagnosticNext')<CR>
  nnoremap <silent> <leader>? :call CocAction('definitionHover', 'preview') <CR>
  inoremap <F4> <C-r>=CocActionAsync('showSignatureHelp')<CR>
  set updatetime=300
  map <Leader>q :call coc#float#close_all()<CR>
  map <Leader>R :lua vim.lsp.stop_client(vim.lsp.get_active_clients())<CR>:e<CR>

  nnoremap <nowait><expr> <C-e> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-e>"
  nnoremap <nowait><expr> <C-y> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-y>"
  inoremap <nowait><expr> <C-e> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<C-e>"
  inoremap <nowait><expr> <C-y> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<C-y>"
else
  silent! unlet g:LanguageClient_serverCommands
  silent! unlet g:coc_config_home
  silent! unmap <F4>
  silent! iunmap <C-j> coc#refresh()
  silent! unmap <Leader>G
  silent! unmap <Leader>D
  silent! unmap <Leader>d
  silent! unmap <Leader>o
  silent! unmap <Leader>O
  silent! unmap <Leader>C
  silent! unmap <Leader>gC
  silent! unmap <leader>?
  silent! unmap <F4> <C-r>=CocActionAsync('showSignatureHelp')<CR>
  set updatetime&
  silent! unmap <Leader>q
  silent! unmap <Leader>R

  silent! unmap <C-e>
  silent! unmap <C-y>
  silent! unmap <C-e>
  silent! unmap <C-y>
endif

" Plugin stuff:
"
" Vim pack directory: ~/.vim/pack/git-plugins/start
"
" Clone repos into there for plugins.
packloadall
silent! helptags ALL

" Restore last cursor position
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" keep undo history
set undofile
set undodir=~/.vim/undo

" Trying to fix the COC stuff:
"
" From: https://www.reddit.com/r/neovim/comments/kln4r8/manually_showing_and_hiding_cocnvim/ghbkirb/
"
" So after some digging I found this file listing all the Coc actions:
" https://github.com/neoclide/coc.nvim/blob/release/doc/coc.txt#L1866
"
" From here I added this line to my :CocConfig => "diagnostic.enableMessage":
" "jump"
" And this mapping in my init.vim => nnoremap <silent> <leader>? :call
" CocAction('diagnosticInfo') <CR>
" This got me to a point where I can open the floating diagnosticWindow
" manually.
"
" I also added this mapping to reopen the autocomplete dropdown: inoremap
" <silent><expr> <A-Tab> coc#refresh()
"
" This is pretty much what I was looking for - it might be one of many
" solutions but this has worked pretty well so far :)

" Disable the annoying autocomplete:
"let g:completion_enable_auto_popup = 0
"let g:completion_enable_auto_signature = 0
"let g:completion_enable_auto_hover = 0
"let g:completion_trigger_keyword_length = 99 " default = 1
"set completeopt=menuone,noselect

function! PrintColor256()
    let num = 255
    while num >= 0
        exec 'hi col_'.num.' ctermbg='.num.' ctermfg=white'
        exec 'syn match col_'.num.' "ctermbg='.num.':...." containedIn=ALL'
        call append(0, 'ctermbg='.num.':....')
        let num = num - 1
    endwhile
endfunction


" ctermbg=0:....
" ctermbg=1:....
" ctermbg=2:....
" ctermbg=3:....
" ctermbg=4:....
" ctermbg=5:....
" ctermbg=6:....
" ctermbg=7:....
" ctermbg=8:....
" ctermbg=9:....
" ctermbg=10:....
" ctermbg=11:....
" ctermbg=12:....
" ctermbg=13:....
" ctermbg=14:....
" ctermbg=15:....
" ctermbg=16:....
" ctermbg=17:....
" ctermbg=18:....
" ctermbg=19:....
" ctermbg=20:....
" ctermbg=21:....
" ctermbg=22:....
" ctermbg=23:....
" ctermbg=24:....
" ctermbg=25:....
" ctermbg=26:....
" ctermbg=27:....
" ctermbg=28:....
" ctermbg=29:....
" ctermbg=30:....
" ctermbg=31:....
" ctermbg=32:....
" ctermbg=33:....
" ctermbg=34:....
" ctermbg=35:....
" ctermbg=36:....
" ctermbg=37:....
" ctermbg=38:....
" ctermbg=39:....
" ctermbg=40:....
" ctermbg=41:....
" ctermbg=42:....
" ctermbg=43:....
" ctermbg=44:....
" ctermbg=45:....
" ctermbg=46:....
" ctermbg=47:....
" ctermbg=48:....
" ctermbg=49:....
" ctermbg=50:....
" ctermbg=51:....
" ctermbg=52:....
" ctermbg=53:....
" ctermbg=54:....
" ctermbg=55:....
" ctermbg=56:....
" ctermbg=57:....
" ctermbg=58:....
" ctermbg=59:....
" ctermbg=60:....
" ctermbg=61:....
" ctermbg=62:....
" ctermbg=63:....
" ctermbg=64:....
" ctermbg=65:....
" ctermbg=66:....
" ctermbg=67:....
" ctermbg=68:....
" ctermbg=69:....
" ctermbg=70:....
" ctermbg=71:....
" ctermbg=72:....
" ctermbg=73:....
" ctermbg=74:....
" ctermbg=75:....
" ctermbg=76:....
" ctermbg=77:....
" ctermbg=78:....
" ctermbg=79:....
" ctermbg=80:....
" ctermbg=81:....
" ctermbg=82:....
" ctermbg=83:....
" ctermbg=84:....
" ctermbg=85:....
" ctermbg=86:....
" ctermbg=87:....
" ctermbg=88:....
" ctermbg=89:....
" ctermbg=90:....
" ctermbg=91:....
" ctermbg=92:....
" ctermbg=93:....
" ctermbg=94:....
" ctermbg=95:....
" ctermbg=96:....
" ctermbg=97:....
" ctermbg=98:....
" ctermbg=99:....
" ctermbg=100:....
" ctermbg=101:....
" ctermbg=102:....
" ctermbg=103:....
" ctermbg=104:....
" ctermbg=105:....
" ctermbg=106:....
" ctermbg=107:....
" ctermbg=108:....
" ctermbg=109:....
" ctermbg=110:....
" ctermbg=111:....
" ctermbg=112:....
" ctermbg=113:....
" ctermbg=114:....
" ctermbg=115:....
" ctermbg=116:....
" ctermbg=117:....
" ctermbg=118:....
" ctermbg=119:....
" ctermbg=120:....
" ctermbg=121:....
" ctermbg=122:....
" ctermbg=123:....
" ctermbg=124:....
" ctermbg=125:....
" ctermbg=126:....
" ctermbg=127:....
" ctermbg=128:....
" ctermbg=129:....
" ctermbg=130:....
" ctermbg=131:....
" ctermbg=132:....
" ctermbg=133:....
" ctermbg=134:....
" ctermbg=135:....
" ctermbg=136:....
" ctermbg=137:....
" ctermbg=138:....
" ctermbg=139:....
" ctermbg=140:....
" ctermbg=141:....
" ctermbg=142:....
" ctermbg=143:....
" ctermbg=144:....
" ctermbg=145:....
" ctermbg=146:....
" ctermbg=147:....
" ctermbg=148:....
" ctermbg=149:....
" ctermbg=150:....
" ctermbg=151:....
" ctermbg=152:....
" ctermbg=153:....
" ctermbg=154:....
" ctermbg=155:....
" ctermbg=156:....
" ctermbg=157:....
" ctermbg=158:....
" ctermbg=159:....
" ctermbg=160:....
" ctermbg=161:....
" ctermbg=162:....
" ctermbg=163:....
" ctermbg=164:....
" ctermbg=165:....
" ctermbg=166:....
" ctermbg=167:....
" ctermbg=168:....
" ctermbg=169:....
" ctermbg=170:....
" ctermbg=171:....
" ctermbg=172:....
" ctermbg=173:....
" ctermbg=174:....
" ctermbg=175:....
" ctermbg=176:....
" ctermbg=177:....
" ctermbg=178:....
" ctermbg=179:....
" ctermbg=180:....
" ctermbg=181:....
" ctermbg=182:....
" ctermbg=183:....
" ctermbg=184:....
" ctermbg=185:....
" ctermbg=186:....
" ctermbg=187:....
" ctermbg=188:....
" ctermbg=189:....
" ctermbg=190:....
" ctermbg=191:....
" ctermbg=192:....
" ctermbg=193:....
" ctermbg=194:....
" ctermbg=195:....
" ctermbg=196:....
" ctermbg=197:....
" ctermbg=198:....
" ctermbg=199:....
" ctermbg=200:....
" ctermbg=201:....
" ctermbg=202:....
" ctermbg=203:....
" ctermbg=204:....
" ctermbg=205:....
" ctermbg=206:....
" ctermbg=207:....
" ctermbg=208:....
" ctermbg=209:....
" ctermbg=210:....
" ctermbg=211:....
" ctermbg=212:....
" ctermbg=213:....
" ctermbg=214:....
" ctermbg=215:....
" ctermbg=216:....
" ctermbg=217:....
" ctermbg=218:....
" ctermbg=219:....
" ctermbg=220:....
" ctermbg=221:....
" ctermbg=222:....
" ctermbg=223:....
" ctermbg=224:....
" ctermbg=225:....
" ctermbg=226:....
" ctermbg=227:....
" ctermbg=228:....
" ctermbg=229:....
" ctermbg=230:....
" ctermbg=231:....
" ctermbg=232:....
" ctermbg=233:....
" ctermbg=234:....
" ctermbg=235:....
" ctermbg=236:....
" ctermbg=237:....
" ctermbg=238:....
" ctermbg=239:....
" ctermbg=240:....
" ctermbg=241:....
" ctermbg=242:....
" ctermbg=243:....
" ctermbg=244:....
" ctermbg=245:....
" ctermbg=246:....
" ctermbg=247:....
" ctermbg=248:....
" ctermbg=249:....
" ctermbg=250:....
" ctermbg=251:....
" ctermbg=252:....
" ctermbg=253:....
" ctermbg=254:....
" ctermbg=255:....
